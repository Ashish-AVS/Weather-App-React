{"version":3,"sources":["Components/Cards.jsx","App.jsx","index.js"],"names":["Cards","props","style","width","className","City","country","Math","round","Temp","src","icon","alt","description","toUpperCase","App","useState","cities","setCities","tempCity","setTempCity","cityData","setCityData","error","setError","updateCities","submitted","event","prevData","target","value","useEffect","fetchData","a","city","length","fetch","process","response","ok","Error","json","finalRes","console","log","background","paddingTop","type","onChange","placeholder","onClick","map","item","index","key","id","name","main","temp","sys","weather","ReactDOM","render","document","getElementById"],"mappings":"oPA2BeA,G,KAzBD,SAACC,GACb,OACE,yBAAKC,MAAO,CAAEC,MAAO,SACnB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aACb,4BACGH,EAAMI,KACP,yBAAKD,UAAU,WAAWH,EAAMK,UAElC,yBAAKF,UAAU,aACZG,KAAKC,MAAMP,EAAMQ,MAClB,uCAEF,gCACE,yBACEC,IAAKT,EAAMU,KACXC,IAAK,gDAEP,oCAAaX,EAAMY,YAAYC,qBC0E5BC,EAxFH,WAAO,IAAD,EACYC,mBAAS,CAAC,KADtB,mBACTC,EADS,KACDC,EADC,OAEgBF,mBAAS,IAFzB,mBAETG,EAFS,KAECC,EAFD,OAGgBJ,mBAAS,IAHzB,mBAGTK,EAHS,KAGCC,EAHD,OAIUN,oBAAS,GAJnB,mBAITO,EAJS,KAIFC,EAJE,KAKVC,EAAe,SAACC,EAAWC,GAE3BD,EACFR,GAAU,SAACU,GAAD,4BAAkBA,GAAlB,CAA4BT,OACjCC,EAAYO,EAAME,OAAOC,QAElCC,qBAAU,WAERC,MACC,CAACf,IAEJ,IAAMe,EAAS,uCAAG,gCAAAC,EAAA,6DACZC,EAAOjB,EAAOA,EAAOkB,OAAS,GADlB,SAEOC,MAAM,qDAAD,OAAsDF,EAAtD,kBApBhBG,mCAoBgB,kBAFZ,UAEVC,EAFU,gBAIRA,EAASC,GAJD,sBAKRf,GAAS,GACH,IAAIgB,MAAMF,EAASf,OANjB,cAQZC,GAAS,GARG,UASWc,EAASG,OATpB,QASNC,EATM,OAUZpB,GAAY,SAACM,GAAD,4BAAkBA,GAAlB,CAA4Bc,OAV5B,yDAaZC,QAAQC,IAAI,0CAAZ,MAbY,kBAcL,wEAdK,0DAAH,qDAsBf,OACE,yBACExC,UAAU,4BACVF,MAAO,CAAE2C,WAAY,UAAWC,WAAY,SAE5C,kDACA,wBAAI1C,UAAU,iBACXmB,EAVE,wDAU2B,gCAEhC,yBAAKnB,UAAU,WACb,2BACE2C,KAAK,OACLC,SAAU,SAACrB,GAAD,OAAWF,GAAa,EAAOE,IACzCsB,YAAY,sBAEd,4BACEF,KAAK,SACL3C,UAAU,qCACV8C,QAAS,kBAAMzB,GAAa,EAAM,MAHpC,WAQF,yBAAKrB,UAAU,qBACZiB,GACCA,EAAS8B,KAAI,SAACC,EAAMC,GAAP,OACX,yBAAKjD,UAAU,eAAekD,IAAKD,GACjC,kBAAC,EAAD,CACEC,IAAKF,EAAKG,GACVlD,KAAM+C,EAAKI,KACX/C,KAAM2C,EAAKK,KAAKC,KAChBpD,QAAS8C,EAAKO,IAAIrD,QAClBO,YAAauC,EAAKQ,QAAQ,GAAG/C,YAC7BF,KACE,qCACAyC,EAAKQ,QAAQ,GAAGjD,KAChB,iBAMZ,gCACE,wBAAIP,UAAU,UACZ,uBAAGA,UAAU,iBADf,qBClFRyD,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,U","file":"static/js/main.741a5ff0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\nconst Cards = (props) => {\n  return (\n    <div style={{ width: \"auto\" }}>\n      <div className=\"card\">\n        <div className=\"container\">\n          <h2>\n            {props.City}\n            <sup className=\"country\">{props.country}</sup>\n          </h2>\n          <div className=\"city-temp\">\n            {Math.round(props.Temp)}\n            <sup>Â°C</sup>\n          </div>\n          <figure>\n            <img\n              src={props.icon}\n              alt={\"http://openweathermap.org/img/wn/50n@2x.png\"}\n            />\n            <figcaption>{props.description.toUpperCase()}</figcaption>\n          </figure>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Cards;\n","import React, { useState, useEffect } from \"react\";\nimport Cards from \"./Components/Cards\";\nimport \"./App.css\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst App = () => {\n  const [cities, setCities] = useState([\"\"]);\n  const [tempCity, setTempCity] = useState(\"\");\n  const [cityData, setCityData] = useState([]);\n  const [error, setError] = useState(false);\n  const updateCities = (submitted, event) => {\n    // data will be obtained from input\n    if (submitted) {\n      setCities((prevData) => [...prevData, tempCity]);\n    } else setTempCity(event.target.value);\n  };\n  useEffect(() => {\n    // ComponentDidUpdate\n    fetchData()\n  }, [cities]);\n\n  const fetchData = async () => {\n    let city = cities[cities.length - 1]; // City is last element\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`)\n    try{\n        if(!response.ok){\n            setError(true)\n            throw new Error(response.error)\n        }\n        setError(false)\n        const finalRes = await response.json()\n        setCityData((prevData) => [...prevData, finalRes]);\n    }   \n    catch(error){\n        console.log(\"400, Some error occured!Invalid request\", error)\n        return <h1>400, Some error occured!Invalid request</h1>\n    }\n}\n\n  const showErrorMessage = () => {\n    return <div>Enter a valid city name</div>;\n  };\n\n  return (\n    <div\n      className=\"firstPage container-fluid\"\n      style={{ background: \"#0a1f44\", paddingTop: \"50px\" }}\n    >\n      <h1>Simple Weather App</h1>\n      <h4 className=\"error-message\">\n        {error ? showErrorMessage() : <span></span>}\n      </h4>\n      <div className=\"my-form\">\n        <input\n          type=\"text\"\n          onChange={(event) => updateCities(false, event)}\n          placeholder=\"Search for a City\"\n        />\n        <button\n          type=\"submit\"\n          className=\"btn btn-danger submitButton btn-lg\"\n          onClick={() => updateCities(true, \"\")}\n        >\n          Submit\n        </button>\n      </div>\n      <div className=\"weather-container\">\n        {cityData &&\n          cityData.map((item, index) => (\n            <div className=\"weather-item\" key={index}>\n              <Cards\n                key={item.id}\n                City={item.name}\n                Temp={item.main.temp}\n                country={item.sys.country}\n                description={item.weather[0].description}\n                icon={\n                  \"https://openweathermap.org/img/wn/\" +\n                  item.weather[0].icon +\n                  \"@2x.png\"\n                }\n              />\n            </div>\n          ))}\n      </div>\n      <footer>\n        <h5 className=\"Footer\">\n          <i className=\"fab fa-react\"></i> App By Ashish\n        </h5>\n      </footer>\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(<App/>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}