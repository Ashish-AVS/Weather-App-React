{"version":3,"sources":["logo.svg","Components/Cards.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","props","className","style","width","City","country","Math","round","Temp","src","icon","alt","description","toUpperCase","API_KEY","App","state","city","wdata","name","main","temp","sys","weather","getWeather","a","fetch","api_Call","json","data","console","log","setState","changed","event","target","value","background","paddingTop","type","onChange","placeholder","onClick","this","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,2JC4B5BC,G,YA1BD,SAACC,GACd,OACC,6BACC,yBAAKC,UAAU,OAAOC,MAAO,CAAEC,MAAO,UAErC,yBAAKF,UAAU,aACX,4BACCD,EAAMI,KACP,yBAAKH,UAAU,WACdD,EAAMK,UAIR,yBAAKJ,UAAU,aACbK,KAAKC,MAAMP,EAAMQ,MAClB,uCAED,gCACD,yBAAKC,IAAKT,EAAMU,KAAMC,IAAK,gDACzB,oCAAaX,EAAMY,YAAYC,qBChBjCC,EAAU,mCAiEDC,E,4MA5DbC,MAAQ,CACNC,KAAK,YACLC,MAAO,CACLC,KAAK,GACLC,KAAM,CACJC,KAAM,GAERC,IAAI,CACFjB,QAAS,IAEXkB,QAAS,CAAC,CAACX,YAAa,GAAIF,KAAM,U,EAItCc,W,sBAAa,8BAAAC,EAAA,sEAEYC,MAAM,oDAAqD,EAAKV,MAAMC,KAAM,UAAYH,EAAU,iBAF9G,cAELa,EAFK,gBAGQA,EAASC,OAHjB,OAGLC,EAHK,OAIXC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZd,MAAOW,IANE,2C,EAWbI,QAAU,SAACC,GACT,EAAKF,SAAS,CACZf,KAAMiB,EAAMC,OAAOC,S,uDAMb,IAAD,OAEP,OACE,yBAAKnC,UAAU,4BAA4BC,MAAO,CAACmC,WAAW,UAAWC,WAAY,SAEnF,kDACA,yBAAKrC,UAAU,WACf,2BAAOsC,KAAK,OAAOC,SAAU,SAACN,GAAD,OAAW,EAAKD,QAAQC,IAAQO,YAAY,sBACzE,4BAAQF,KAAO,SAAStC,UAAU,qCAAqCyC,QAASC,KAAKnB,YAArF,WAKA,kBAAC,EAAD,CACIpB,KAAQuC,KAAK3B,MAAME,MAAMC,KACzBX,KAAQmC,KAAK3B,MAAME,MAAME,KAAKC,KAC9BhB,QAAWsC,KAAK3B,MAAME,MAAMI,IAAIjB,QAChCO,YAAe+B,KAAK3B,MAAME,MAAMK,QAAQ,GAAGX,YAC7CF,KAAM,oCAAsCiC,KAAK3B,MAAME,MAAMK,QAAQ,GAAGb,KAAO,YAGjF,wBAAIT,UAAU,UAAS,uBAAG2C,MAAM,iBAAhC,wB,GAxDUC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.719cbb4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport Card from \"./Card\";\r\nconst Cards = (props) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div className=\"card\" style={{ width: \"18rem\" }}>\r\n\t\t\t\t{/* <img src=\"...\" class=\"card-img-top\" alt=\"...\" /> */}\r\n\t\t\t\t<div className=\"container\">\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<h2> \r\n\t\t\t\t\t\t\t\t{props.City}\r\n\t\t\t\t\t\t\t\t<sup className=\"country\">\r\n\t\t\t\t\t\t\t\t{props.country}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</sup>\r\n\t\t\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t\t<div className=\"city-temp\">\r\n\t\t\t\t\t\t\t\t{Math.round(props.Temp)}\r\n\t\t\t\t\t\t\t\t<sup>Â°C</sup>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<figure>\r\n\t\t\t\t\t\t<img src={props.icon} alt={\"http://openweathermap.org/img/wn/50n@2x.png\"}/>\r\n\t\t\t\t\t\t\t\t<figcaption>{props.description.toUpperCase()}</figcaption>\r\n\t\t\t\t\t\t\t</figure>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n} \r\nexport default Cards;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Cards from './Components/Cards'\r\n\r\nconst API_KEY = \"78872b499149036415d75305243de5d8\";\r\n\r\n\r\nclass App extends Component{\r\n\r\n  state = {\r\n    city:\"Hyderabad\",\r\n    wdata: {\r\n      name:'',\r\n      main: {\r\n        temp: 0\r\n      },\r\n      sys:{\r\n        country: \"\"\r\n      },\r\n      weather: [{description: \"\", icon: \"50n\"}]\r\n    }\r\n  }\r\n  \r\n  getWeather = async () => {\r\n    // e.preventDefault();\r\n    const api_Call = await fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\"+ this.state.city +\"&appid=\" + API_KEY + \"&units=metric\");\r\n    const data = await api_Call.json();\r\n    console.log(data);    \r\n    this.setState({\r\n      wdata: data\r\n    })\r\n  }\r\n\r\n\r\n  changed = (event) => {\r\n    this.setState({\r\n      city: event.target.value\r\n    });\r\n    \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return(\r\n      <div className=\"firstPage container-fluid\" style={{background:\"#0a1f44\", paddingTop: \"50px\"}} >\r\n      {/* <form> */}\r\n        <h1 >Simple Weather App</h1>\r\n        <div className=\"my-form\">\r\n        <input type=\"text\" onChange={(event) => this.changed(event)} placeholder=\"Search for a City\"/>\r\n        <button type = \"submit\" className=\"btn btn-danger submitButton btn-lg\" onClick={this.getWeather}>Submit</button>\r\n        </div>\r\n        {/* </form> */}\r\n\r\n        \r\n        <Cards\r\n            City = {this.state.wdata.name}\r\n            Temp = {this.state.wdata.main.temp}\r\n            country = {this.state.wdata.sys.country}\r\n            description = {this.state.wdata.weather[0].description}\r\n          icon={\"http://openweathermap.org/img/wn/\" + this.state.wdata.weather[0].icon + \"@2x.png\"}\r\n        />\r\n\r\n        <h5 className=\"Footer\"><i class=\"fab fa-react\"></i>  App By Ashish</h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}